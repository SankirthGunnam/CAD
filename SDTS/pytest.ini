[tool:pytest]
# Pytest configuration for SDTS project following TDD principles

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output and reporting
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --color=yes
    --durations=10
    --showlocals
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80

# Markers for test categorization
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests  
    gui: marks tests that require GUI/Qt
    performance: marks tests that measure performance
    smoke: marks tests for smoke testing (quick validation)
    regression: marks tests for regression testing
    api: marks tests for API endpoints
    database: marks tests that require database
    network: marks tests that require network access

# Filtering and collection
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*QtWidgets.*:DeprecationWarning
    ignore:.*PySide6.*:DeprecationWarning

# Minimum version requirement
minversion = 7.0

# Test timeout (in seconds)
timeout = 300

# Parallel execution settings
# Uncomment below to enable parallel test execution with pytest-xdist
# addopts = -n auto

# Coverage settings
# Exclude patterns for coverage
# These paths will be excluded from coverage analysis
norecursedirs = 
    .git
    .tox
    .env
    venv
    env
    __pycache__
    .pytest_cache
    htmlcov
    build
    dist
    *.egg-info

# Qt-specific settings for GUI tests
qt_no_exception_capture = 1
qt_wait_signal_raising = true

# Log settings for debugging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S
